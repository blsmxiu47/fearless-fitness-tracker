generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model exercises {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @db.Timestamp(6)
  updated_at DateTime  @db.Timestamp(6)
  user_id    Int?
  routine_id Int?
  ordinal    Int?
  name       String    @unique @db.VarChar(255)
  sets       Int?
  reps       String?   @db.VarChar(255)
  weight     String?   @db.VarChar(255)
  duration   String?   @db.VarChar(255)
  rest       String?   @db.VarChar(255)
  notes      String?   @db.VarChar(255)
  focus_id   Int?
  focuses    focuses?  @relation(fields: [focus_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  routines   routines? @relation(fields: [routine_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model focuses {
  id         Int         @id @default(autoincrement())
  created_at DateTime    @db.Timestamp(6)
  updated_at DateTime    @db.Timestamp(6)
  user_id    Int?
  name       String      @unique @db.VarChar(255)
  exercises  exercises[]
  users      users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model plan_days {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @db.Timestamp(6)
  updated_at     DateTime @db.Timestamp(6)
  plan_id        Int?
  week_number    Int?
  day_number     Int?
  description    String?  @db.VarChar(65535)
  session_a      String?  @db.VarChar(65535)
  session_b      String?  @db.VarChar(65535)
  total_duration String?  @db.VarChar(255)
  total_distance String?  @db.VarChar(255)
  plans          plans?   @relation(fields: [plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model plans {
  id          Int         @id @default(autoincrement())
  created_at  DateTime    @db.Timestamp(6)
  updated_at  DateTime    @db.Timestamp(6)
  user_id     Int?
  name        String      @unique @db.VarChar(30)
  description String?     @db.VarChar(255)
  duration    String?     @db.VarChar(255)
  frequency   String?     @db.VarChar(255)
  tags        String[]    @db.VarChar(255)
  plan_days   plan_days[]
  users       users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model routines {
  id         Int         @id @default(autoincrement())
  created_at DateTime    @db.Timestamp(6)
  updated_at DateTime    @db.Timestamp(6)
  user_id    Int?
  name       String      @unique @db.VarChar(255)
  type_id    Int?
  duration   String?     @db.VarChar(255)
  frequency  String?     @db.VarChar(255)
  exercises  exercises[]
  types      types?      @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model shoes {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)
  user_id     Int?
  model       String?  @db.VarChar(50)
  class       String?  @db.VarChar(20)
  description String?  @db.VarChar(255)
  rating      Int?
  notes       String?  @db.VarChar(255)
  runs        runs[]
  users       users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model types {
  id         Int        @id @default(autoincrement())
  created_at DateTime   @db.Timestamp(6)
  updated_at DateTime   @db.Timestamp(6)
  user_id    Int?
  name       String     @unique @db.VarChar(255)
  routines   routines[]
  users      users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workouts   workouts[]
}

model users {
  id         Int         @id @default(autoincrement())
  created_at DateTime    @db.Timestamp(6)
  updated_at DateTime    @db.Timestamp(6)
  email      String      @unique @db.VarChar(255)
  first_name String?     @db.VarChar(255)
  exercises  exercises[]
  focuses    focuses[]
  plans      plans[]
  routines   routines[]
  runs       runs[]
  shoes      shoes[]
  types      types[]
  workouts   workouts[]
}

model workouts {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @db.Timestamp(6)
  updated_at DateTime  @db.Timestamp(6)
  user_id    Int?
  type_id    Int?
  exercises  Int[]
  datetime   DateTime? @db.Timestamp(6)
  title      String?   @db.VarChar(255)
  notes      String?   @db.VarChar(65535)
  duration   Int?
  types      types?    @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model runs {
  id                    Int       @id @default(autoincrement())
  created_at            DateTime  @db.Timestamp(6)
  updated_at            DateTime  @db.Timestamp(6)
  user_id               Int?
  datetime              DateTime? @db.Timestamp(6)
  title                 String?   @db.VarChar(50)
  cycle_id              Int?
  week_number           Int?
  week_label            String?   @db.VarChar(50)
  shoe_id               Int?
  hydropak              Boolean?
  notes                 String?   @db.VarChar(65535)
  duration              Int?
  distance              Int?
  distance_unit         String?   @db.VarChar(20)
  elevation_gain        Int?
  elevation_gain_unit   String?   @db.VarChar(20)
  ti_1                  Int?
  ti_2                  Int?
  ti_3                  Int?
  ti_4                  Int?
  ti_5                  Int?
  calories              Int?
  average_heart_rate    Int?
  max_heart_rate        Int?
  average_run_cadence   Int?
  max_run_cadence       Int?
  average_pace          Float?
  best_pace             Float?
  average_lap_time      Int?
  best_lap_time         Int?
  number_of_laps        Int?
  total_ascent          Int?
  total_descent         Int?
  average_stride_length Float?
  min_elevation         Int?
  max_elevation         Int?
  shoes                 shoes?    @relation(fields: [shoe_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                 users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
