generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String @unique
  firstName String
  plans     Plan[]
  routines  Routine[]
  types     Type[]
  focuses   Focus[]
  exercises Exercise[]
  workouts  Workout[]
  shoes     Shoe[]
}

model Plan {
  id          Int @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User @relation(fields: [userId], references: [id])
  userId      Int
  name        String @unique
  custom      Boolean
  description String
  duration    String
  frequency   String
  tags        String[]
  days        PlanDay[]
}

model PlanDay {
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan @relation(fields: [planId], references: [id])
  planId    Int
  weekNumber Int
  dayNumber Int
  description String?
  sessionA String?
  sessionB String?
  totalDuration Int?
  totalDistance Int?
}

model Routine {
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User @relation(fields: [userId], references: [id])
  userId    Int
  name      String @unique
  custom    Boolean
  exercises Exercise[]
  duration  String
  frequency String
}

model Type {
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User @relation(fields: [userId], references: [id])
  userId    Int
  name      String @unique
  custom    Boolean
  exercises Exercise[]
}

model Focus {
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User @relation(fields: [userId], references: [id])
  userId    Int
  name      String @unique
  custom    Boolean
  exercises Exercise[]
}

model Exercise {
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User @relation(fields: [userId], references: [id])
  userId    Int
  name      String @unique
  workouts  Workout[]
  type      Type @relation(fields: [typeId], references: [id])
  typeId    Int
  custom    Boolean
  focus     Focus @relation(fields: [focusId], references: [id])
  focusId   Int
  routines  Routine[]
}

model Workout {
  id                  Int @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User @relation(fields: [userId], references: [id])
  userId              Int
  exercises           Exercise[]
  datetime            DateTime
  title               String?
  notes               String?
  duration            Int?
  distance            Int?
  calories            Int?
  averageHeartRate    Int?
  maxHeartRate        Int?
  averageRunCadence   Int?
  maxRunCadence       Int?
  averagePace         Float?
  bestPace            Float?
  averageLapTime      Int?
  bestLapTime         Int?
  numberOfLaps        Int?
  totalAscent         Int?
  totalDescent        Int?
  averageStrideLength Float?
  minElevation        Int?
  maxElevation        Int?
}

model Shoe {
  id          Int @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User @relation(fields: [userId], references: [id])
  userId      Int
  model       String
  description String
  rating      Int
  notes       String?
}