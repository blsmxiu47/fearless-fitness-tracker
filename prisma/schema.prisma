generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  email     String     @unique
  firstName String
  exercises Exercise[]
  focuses   Focus[]
  plans     Plan[]
  routines  Routine[]
  shoes     Shoe[]
  types     Type[]
  workouts  Workout[]
}

model Plan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  name      String   @unique
  custom    Boolean
  user      User     @relation(fields: [userId], references: [id])
}

model Routine {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  name      String   @unique
  custom    Boolean
  duration  Int
  frequency Int
  user      User     @relation(fields: [userId], references: [id])
}

model Type {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    Int
  name      String     @unique
  custom    Boolean
  exercises Exercise[]
  user      User       @relation(fields: [userId], references: [id])
}

model Focus {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    Int
  name      String     @unique
  custom    Boolean
  exercises Exercise[]
  user      User       @relation(fields: [userId], references: [id])
}

model Exercise {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  name      String    @unique
  typeId    Int
  custom    Boolean
  focusId   Int
  focus     Focus     @relation(fields: [focusId], references: [id])
  type      Type      @relation(fields: [typeId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  workouts  Workout[] @relation("ExerciseToWorkout")
}

model Workout {
  id                  Int        @id @default(autoincrement())
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  userId              Int
  datetime            DateTime
  title               String?
  notes               String?
  duration            Int?
  distance            Float?
  calories            Int?
  averageHeartRate    Int?
  maxHeartRate        Int?
  averageRunCadence   Int?
  maxRunCadence       Int?
  averagePace         Float?
  bestPace            Float?
  averageLapTime      Int?
  bestLapTime         Int?
  numberOfLaps        Int?
  totalAscent         Int?
  totalDescent        Int?
  averageStrideLength Float?
  minElevation        Int?
  maxElevation        Int?
  user                User       @relation(fields: [userId], references: [id])
  exercises           Exercise[] @relation("ExerciseToWorkout")
}

model Shoe {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  model       String
  description String
  rating      Int
  notes       String?
  user        User     @relation(fields: [userId], references: [id])
}

model exercises {
  id         Int      @id @default(autoincrement())
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  user_id    Int?
  name       String   @unique @db.VarChar(255)
  type_id    Int?
  custom     Boolean
  focus_id   Int?
  routines   Int[]
  focuses    focuses? @relation(fields: [focus_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  types      types?   @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model focuses {
  id         Int         @id @default(autoincrement())
  created_at DateTime    @db.Timestamp(6)
  updated_at DateTime    @db.Timestamp(6)
  user_id    Int?
  name       String      @unique @db.VarChar(255)
  custom     Boolean
  exercises  exercises[]
  users      users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model plan_days {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @db.Timestamp(6)
  updated_at     DateTime @db.Timestamp(6)
  plan_id        Int?
  week_number    Int?
  day_number     Int?
  description    String?  @db.VarChar(65535)
  session_a      String?  @db.VarChar(65535)
  session_b      String?  @db.VarChar(65535)
  total_duration Int?
  total_distance Int?
  plans          plans?   @relation(fields: [plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model plans {
  id         Int         @id @default(autoincrement())
  created_at DateTime    @db.Timestamp(6)
  updated_at DateTime    @db.Timestamp(6)
  user_id    Int?
  name       String      @unique @db.VarChar(255)
  custom     Boolean
  plan_days  plan_days[]
  users      users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model routines {
  id         Int      @id @default(autoincrement())
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  user_id    Int?
  name       String   @unique @db.VarChar(255)
  custom     Boolean
  exercises  Int[]
  duration   String?  @db.VarChar(255)
  frequency  String?  @db.VarChar(255)
  users      users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model shoes {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)
  user_id     Int?
  model       String?  @db.VarChar(255)
  description String?  @db.VarChar(255)
  rating      Int?
  notes       String?  @db.VarChar(65535)
  users       users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model types {
  id         Int         @id @default(autoincrement())
  created_at DateTime    @db.Timestamp(6)
  updated_at DateTime    @db.Timestamp(6)
  user_id    Int?
  name       String      @unique @db.VarChar(255)
  custom     Boolean
  exercises  exercises[]
  users      users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id         Int         @id @default(autoincrement())
  created_at DateTime    @db.Timestamp(6)
  updated_at DateTime    @db.Timestamp(6)
  email      String      @unique @db.VarChar(255)
  first_name String?     @db.VarChar(255)
  exercises  exercises[]
  focuses    focuses[]
  plans      plans[]
  routines   routines[]
  shoes      shoes[]
  types      types[]
  workouts   workouts[]
}

model workouts {
  id                    Int       @id @default(autoincrement())
  created_at            DateTime  @db.Timestamp(6)
  updated_at            DateTime  @db.Timestamp(6)
  user_id               Int?
  exercises             Int[]
  datetime              DateTime? @db.Timestamp(6)
  title                 String?   @db.VarChar(255)
  notes                 String?   @db.VarChar(65535)
  duration              Int?
  distance              Int?
  calories              Int?
  average_heart_rate    Int?
  max_heart_rate        Int?
  average_run_cadence   Int?
  max_run_cadence       Int?
  average_pace          Float?
  best_pace             Float?
  average_lap_time      Int?
  best_lap_time         Int?
  number_of_laps        Int?
  total_ascent          Int?
  total_descent         Int?
  average_stride_length Float?
  min_elevation         Int?
  max_elevation         Int?
  users                 users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
